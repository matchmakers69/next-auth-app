// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @unique @default(uuid())
  name                  String
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  sessions              Session[]
  Post                  Article[]
  Comment               Comment[]
  subscriptions         Subscription[]
  role                  UserRole               @default(USER)
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Topic {
  id          String    @id @default(cuid())
  slug        String    @unique
  description String
  posts       Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id      String @id @default(cuid())
  title   String
  content String
  userId  String
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic     @relation(fields: [topicId], references: [id])
  comments Comment[]
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  postId   String
  userId   String
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Article   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}

// SUBSCRIPTIONS
enum SUBSCRIPTION_CURRENCY {
  PLN
  EUR
  GBP
  USD
}

enum SUBSCRIPTION_CATEGORY_LABEL {
  ENTERTAINMENT
  FITNESS
  HOUSE
  CAR
  EDUCATION
  HOBBY
  OTHER
}

model SubscriptionCategory {
  id    String                       @id @default(uuid())
  label SUBSCRIPTION_CATEGORY_LABEL?
}

enum SUBSCRIPTION_BILLING_PERIOD {
  WEEKLY
  MONTHLY
  YEARLY
}

enum SUBSCRIPTION_STATUS {
  ACTIVE
  NOT_ACTIVE
}

enum PAYMENT_STATUS {
  NOT_PAID
  PAID
}

model Payment {
  id             String         @id @default(uuid())
  amount         Float
  due_date       DateTime       @db.Date
  status         PAYMENT_STATUS @default(NOT_PAID)
  subscriptionId String?
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

// Subscription model
model Subscription {
  id                String                      @id @default(uuid())
  name              String
  price             Float
  currency          SUBSCRIPTION_CURRENCY       @default(GBP)
  start_date        DateTime                    @db.Date
  end_date          DateTime?                   @db.Date
  billing_period    SUBSCRIPTION_BILLING_PERIOD @default(MONTHLY)
  next_payment_date DateTime                    @db.Date
  category          String
  avatar_url        String
  status            SUBSCRIPTION_STATUS         @default(ACTIVE)

  ownerId  String
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  payments Payment[]
}

// FINANCE TRACKER

enum INCOME_CATEGORY_LABEL {
  SALARY
  BONUS
  REFUNDS
  OTHER
}

enum EXPENSE_CATEGORY_LABEL {
  HOUSING
  HOBBY
  HOLIDAYS
  FOOD
  INSURANCES
  FITNESS
  EDUCATION
  OTHER
}

model IncomeCategory {
  id    String                 @id @default(uuid())
  label INCOME_CATEGORY_LABEL?
}

model ExpenseCategory {
  id    String                  @id @default(uuid())
  label EXPENSE_CATEGORY_LABEL?
}

model FinanceCategory {
  createdAt DateTime @default(now())
  name      String
  userId    String
  type      String   @default("income")

  @@unique([name, userId, type])
}

model FinanceTransaction {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
  amount      Float
  currency    SUBSCRIPTION_CURRENCY @default(GBP)
  description String
  date        DateTime
  userId      String
  type        String                @default("income")
  category    String
}

model MonthHistory {
  userId  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([day, month, year, userId])
}

model YearHistory {
  userId  String
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([month, year, userId])
}
